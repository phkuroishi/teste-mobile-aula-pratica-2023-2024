buildscript {
    ext.jacocoVersion='0.8.7'
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.0"
        classpath 'org.codehaus.groovy:groovy-xml:3.0.13'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}

project.ext {
    // AndroidX
    annotationVersion = "1.2.0"
    appcompatVersion = "1.3.1"
    coreVersion = "1.5.0"
    fragmentVersion = "1.3.6"
    mediaVersion = "1.4.3"
    paletteVersion = "1.0.0"
    preferenceVersion = "1.1.1"
    recyclerViewVersion = "1.2.1"
    viewPager2Version = "1.1.0-beta01"
    workManagerVersion = "2.7.1"
    googleMaterialVersion = "1.7.0"

    // Third-party
    commonslangVersion = "3.6"
    commonsioVersion = "2.5"
    jsoupVersion = "1.15.1"
    glideVersion = "4.13.2"
    okhttpVersion = "3.12.10"
    okioVersion = "1.17.5"
    eventbusVersion = "3.3.1"
    rxAndroidVersion = "2.1.1"
    rxJavaVersion = "2.2.2"
    iconifyVersion = "2.2.2"
    annimonStreamVersion = "1.2.2"
    exoPlayerVersion = "2.14.2"

    // Google Play build
    wearableSupportVersion = "2.6.0"

    //Tests
    awaitilityVersion = "3.1.6"
    junitVersion = "4.13"
    robolectricVersion = "4.9"
    espressoVersion = "3.5.0"
    runnerVersion = "1.5.0"
    rulesVersion = "1.5.0"
    testCoreVersion = "1.5.0"
}

apply plugin: "checkstyle"
checkstyle {
    toolVersion '10.3.1'
}

task checkstyle(type: Checkstyle) {
    classpath = files()
    source "${project.rootDir}"
    exclude("**/gen/**")
    exclude("**/generated/**")
}

subprojects {
    apply plugin: 'jacoco'
}

//task jacocoRootReport(type: JacocoReport) {
//    def excludes = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*']
//
//    def executionDataFiles = files()
//    def sourceDirectoriesFiles = files()
//    def classDirectoriesFiles = files()
//
//    subprojects.each { subproject ->
//        subproject.plugins.withType(JacocoPlugin) {
//            def hasTestTask = false
//            subproject.tasks.withType(Test) { testTask ->
//                if (testTask.name.contains("ebugUnitTest")) {
//                    hasTestTask = true
//                    executionDataFiles += subproject.fileTree(dir: subproject.buildDir, includes: [
//                            "outputs/unit_test_code_coverage/debugUnitTest/${testTask.name}.exec",
//                            "outputs/unit_test_code_coverage/freeDebugUnitTest/${testTask.name}.exec"
//                    ])
//                }
//            }
//
//            if (hasTestTask) {
//                sourceDirectoriesFiles += subproject.sourceSets.main.allSource.srcDirs
//                classDirectoriesFiles += subproject.fileTree(dir: subproject.buildDir + "/intermediates/javac/debug/classes", excludes: excludes)
//                classDirectoriesFilesFree += subproject.fileTree(dir: subproject.buildDir + "/intermediates/javac/freeDebug/classes", excludes: excludes)
//            }
//        }
//    }
//
//    executionData.setFrom(executionDataFiles)
//    sourceDirectories.setFrom(sourceDirectoriesFiles)
//    classDirectories.setFrom([classDirectoriesFiles, classDirectoriesFilesFree])
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    doFirst {
//        classDirectories.setFrom(files(classDirectories.files.collect {
//            fileTree(dir: it, excludes: excludes)
//        }))
//    }
//}
